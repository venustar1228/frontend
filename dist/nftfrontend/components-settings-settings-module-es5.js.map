{"version":3,"sources":["webpack:///src/app/components/settings/settings-routing.module.ts","webpack:///src/app/components/settings/settings.module.ts","webpack:///src/app/components/settings/general/general.component.ts","webpack:///src/app/components/settings/general/general.component.html","webpack:///src/app/components/settings/changepassword/changepassword.component.ts","webpack:///src/app/components/settings/changepassword/changepassword.component.html","webpack:///src/app/components/settings/wallet/wallet.component.ts","webpack:///src/app/components/settings/wallet/wallet.component.html","webpack:///src/app/components/settings/transfer/transfer.component.ts","webpack:///src/app/components/settings/transfer/transfer.component.html"],"names":["routes","path","redirectTo","pathMatch","component","SettingsRoutingModule","forChild","imports","exports","SettingsModule","forRoot","relativeTimeThresholdOptions","declarations","GeneralComponent","formbuilder","snackBar","userService","button_title","isAPILoading","getProfileInfo","viewProfile","currentUser","user_id","subscribe","result","resulter","userInfo","generalForm","controls","username","setValue","email","first_name","last_name","updateApi","params","status","localStorage","setItem","return_id","open","duration","location","href","base_url","message","getUser","group","compose","required","minLength","maxLength","pattern","formData","valid","value","invalid","errors","minlength","maxlength","console","log","onSubmit","selector","templateUrl","styleUrls","ChangepasswordComponent","passwordForm","password","confirm_password","WalletComponent","clipboard","itemService","dialog","walletInput","walletAmount","public_key","userBalance","checkBalance","toFixed","tranferAction","dialogRef","afterClosed","type","copyAddress","copy","TransferComponent","data","transferApi","transferBalance","close","closePop","transferForm","eth_address","amount"],"mappings":"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","file":"components-settings-settings-module-es5.js","sourcesContent":["/*\nProject : Cryptotrades\nFileName :  settings-routing.module.ts\nAuthor : LinkWell\nFile Created : 21/07/2021\nCopyRights : LinkWell\nPurpose : This is the routing module which used to load routes for setting module\n*/\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ChangepasswordComponent } from './changepassword/changepassword.component';\nimport { GeneralComponent } from './general/general.component';\nimport { WalletComponent } from './wallet/wallet.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'wallet',\n    pathMatch: 'full',\n  },\n  {\n    path: 'wallet',\n    component: WalletComponent\n  },\n  {\n    path: 'general',\n    component: GeneralComponent\n  },\n  {\n    path: 'changepassword',\n    component: ChangepasswordComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule {}\n","/*\nProject : Cryptotrades\nFileName :  settings.module.ts\nAuthor : LinkWell\nFile Created : 21/07/2021\nCopyRights : LinkWell\nPurpose : This is the module which load component and module for setting \n*/\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { MomentModule } from 'ngx-moment';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport { WalletComponent } from './wallet/wallet.component';\nimport { GeneralComponent } from './general/general.component';\nimport { ChangepasswordComponent } from './changepassword/changepassword.component';\nimport { TransferComponent } from './transfer/transfer.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    SettingsRoutingModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MomentModule.forRoot({\n      relativeTimeThresholdOptions: {\n        'm': 59\n      }\n    }),\n    AlertModule\n  ],\n  declarations: [WalletComponent, GeneralComponent, ChangepasswordComponent, TransferComponent]\n})\nexport class SettingsModule { }\n","/*\nProject : Cryptotrades\nFileName :  general.component.ts\nAuthor : LinkWell\nFile Created : 21/07/2021\nCopyRights : LinkWell\nPurpose : This is the component file which used to show edit profile screen for user\n*/\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { config } from 'src/app/constants/config';\nimport { UserService } from 'src/app/services/user.service';\n@Component({\n  selector: 'app-general',\n  templateUrl: './general.component.html',\n  styleUrls: ['./general.component.css']\n})\nexport class GeneralComponent implements OnInit {\n  button_title = \"Save\"\n  generalForm: FormGroup;\n  isAPILoading: boolean = false\n  currentUser:any;\n  userInfo:any;\n  constructor(\n    public formbuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private userService: UserService\n  ) {\n    this.currentUser = this.userService.getUser()\n    this.generalForm = formbuilder.group({\n      'username': [null, Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(255)])],\n      'email': [null, Validators.compose([Validators.required, Validators.minLength(3),Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$')])],\n      'first_name': [null, Validators.compose([Validators.required, Validators.maxLength(32)])],\n      'last_name': [null, Validators.compose([Validators.required, Validators.maxLength(32)])],\n    })\n    this.getProfileInfo();\n   }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * This is the function which used to get profile information of logged in user\n   */\n  getProfileInfo = () => {\n    this.userService.viewProfile(this.currentUser.user_id).subscribe(result=>{\n      var resulter:any = result;\n      this.userInfo = resulter.result;\n      this.generalForm.controls.username.setValue(this.userInfo.username)\n      this.generalForm.controls.email.setValue(this.userInfo.email)\n      this.generalForm.controls.first_name.setValue(this.userInfo.first_name)\n      this.generalForm.controls.last_name.setValue(this.userInfo.last_name)\n    })\n  }  \n\n\n  /**\n   * This is the function which used update profile information with validation\n   */\n  onSubmit(formData:any) {\n    if (this.generalForm.valid && this.button_title == \"Save\") {\n      this.button_title = \"Saving...\"\n      this.updateApi({\n        username: formData.value.username,\n        first_name: formData.value.first_name,\n        last_name: formData.value.last_name,\n        email: formData.value.email\n      });\n    } else {\n      if (this.generalForm.controls.username.invalid) {\n        if (this.generalForm.controls.username.errors) {\n          if (this.generalForm.controls.username.errors.required) {\n            this.snackBar.open('Username is required', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.username.errors.minlength) {\n            this.snackBar.open('Username required minimum 3 characters', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.username.errors.maxlength) {\n            this.snackBar.open('Username required maximum 255 characters', \"\", { duration: 2000 });\n          } \n        }\n      } else if (this.generalForm.controls.email.invalid) {\n        if (this.generalForm.controls.email.errors) {\n          console.log(this.generalForm.controls.email.errors);\n          if (this.generalForm.controls.email.errors.required) {\n            this.snackBar.open('Email is required', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.email.errors.minlength) {\n            this.snackBar.open('Email required minimum 3 characters', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.email.errors.pattern) {\n            this.snackBar.open('Invalid Email', \"\", { duration: 2000 });\n          }\n        }\n      } else if (this.generalForm.controls.first_name.invalid) {\n        if (this.generalForm.controls.first_name.errors) {\n          if (this.generalForm.controls.first_name.errors.required) {\n            this.snackBar.open('First Name is required', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.first_name.errors.minlength) {\n            this.snackBar.open('First Name required minimum 3 characters', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.first_name.errors.maxlength) {\n            this.snackBar.open('First Name required maximum 32 characters', \"\", { duration: 2000 });\n          } \n        }\n      } else if (this.generalForm.controls.last_name.invalid) {\n        if (this.generalForm.controls.last_name.errors) {\n          if (this.generalForm.controls.last_name.errors.required) {\n            this.snackBar.open('Last Name is required', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.last_name.errors.minlength) {\n            this.snackBar.open('Last Name required minimum 3 characters', \"\", { duration: 2000 });\n          } else if (this.generalForm.controls.last_name.errors.maxlength) {\n            this.snackBar.open('Last Name required maximum 32 characters', \"\", { duration: 2000 });\n          } \n        }\n      }\n    }\n  }\n\n  /**\n   * This is the function which used update profile information through api\n   */\n  updateApi = (params:any) => {\n    this.isAPILoading = true;\n     this.userService.updateApi(params,this.currentUser.user_id).subscribe(result=>{\n       this.isAPILoading = false;\n       if(result.status == true) {\n        localStorage.setItem('token',result.return_id);\n        this.snackBar.open('General settings updated successfully', \"\", { duration: 2000 });\n        location.href = config.base_url\n       } else {\n        this.snackBar.open(result.message, \"\", { duration: 2000 });\n       }\n       this.button_title = \"Save\"\n     })\n  }\n\n}\n","<div class=\"pagecontainer\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              General Settings \n            </div>\n            <div class=\"card-body\">\n                <form [formGroup]=\"generalForm\" (ngSubmit)=\"onSubmit(generalForm)\">\n                <div class=\" row\">\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"username\">User Name</label>\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter User Name\" formControlName=\"username\" required>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"email\">Email</label>\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter User Name\" formControlName=\"email\" required>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\" row\">\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"username\">First Name</label>\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter First Name\" formControlName=\"first_name\" required>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"email\">Last Name</label>\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter Last Name\" formControlName=\"last_name\" required>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <button type=\"submit\" class=\"btn btn-primary px-4\">{{button_title}}</button>\n                    </div>\n                </div>\n                </form>\n          \n            </div>\n          </div>\n        </div>\n     </div>\n</div>","/*\nProject : Cryptotrades\nFileName :  changepassword.component.ts\nAuthor : LinkWell\nFile Created : 21/07/2021\nCopyRights : LinkWell\nPurpose : This is the component file which used to show change password screen for user\n*/\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { config } from 'src/app/constants/config';\nimport { UserService } from 'src/app/services/user.service';\n@Component({\n  selector: 'app-changepassword',\n  templateUrl: './changepassword.component.html',\n  styleUrls: ['./changepassword.component.css']\n})\nexport class ChangepasswordComponent implements OnInit {\n  button_title = \"Save\"\n  passwordForm: FormGroup;\n  isAPILoading: boolean = false\n  currentUser:any;\n  userInfo:any;\n  constructor(\n    public formbuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private userService: UserService\n  ) {\n    this.currentUser = this.userService.getUser()\n    this.passwordForm = formbuilder.group({\n      'password': [null,Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(32)])],\n      'confirm_password': [null,Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(32)])]\n    })\n    this.getProfileInfo();\n   }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * This is the function which used to get profile information of logged in user\n   */\n  getProfileInfo = () => {\n    this.userService.viewProfile(this.currentUser.user_id).subscribe(result=>{\n      var resulter:any = result;\n      this.userInfo = resulter.result;\n    })\n  }  \n\n  /**\n   * This is the function which used to change password with validation\n   */\n  onSubmit(formData:any) {\n    if (this.passwordForm.valid && this.button_title == \"Save\") {\n      if(formData.value.password != formData.value.confirm_password) {\n        this.snackBar.open('Password Mismatch', \"\", { duration: 2000 });\n        return;\n      }\n      this.button_title = \"Saving...\"\n      this.updateApi({\n        password: formData.value.password,\n      });\n    } else {\n      if (this.passwordForm.controls.password.invalid) {\n        if (this.passwordForm.controls.password.errors) {\n          if (this.passwordForm.controls.password.errors.required) {\n            this.snackBar.open('Password is required', \"\", { duration: 2000 });\n          } else if (this.passwordForm.controls.password.errors.minlength) {\n            this.snackBar.open('Password required minimum 3 characters', \"\", { duration: 2000 });\n          } else if (this.passwordForm.controls.password.errors.maxlength) {\n            this.snackBar.open('Password required maximum 32 characters', \"\", { duration: 2000 });\n          } \n        }\n      } else if (this.passwordForm.controls.confirm_password.invalid) {\n        if (this.passwordForm.controls.confirm_password.errors) {\n          if (this.passwordForm.controls.confirm_password.errors.required) {\n            this.snackBar.open('Confirm Password is required', \"\", { duration: 2000 });\n          } else if (this.passwordForm.controls.confirm_password.errors.minlength) {\n            this.snackBar.open('Confirm Password required minimum 3 characters', \"\", { duration: 2000 });\n          } else if (this.passwordForm.controls.confirm_password.errors.maxlength) {\n            this.snackBar.open('Confirm Password required maximum 32 characters', \"\", { duration: 2000 });\n          } \n        }\n      }\n    }\n     \n  }\n\n  /**\n   * This is the function which used to change password through api\n   */\n  updateApi = (params:any) => {\n    this.isAPILoading = true;\n     this.userService.updateApi(params,this.currentUser.user_id).subscribe(result=>{\n       this.isAPILoading = false;\n       if(result.status == true) {\n        localStorage.setItem('token',result.return_id);\n        this.snackBar.open('Password updated successfully', \"\", { duration: 2000 });\n        location.href = config.base_url\n       } else {\n        this.snackBar.open(result.message, \"\", { duration: 2000 });\n       }\n       this.button_title = \"Save\"\n     })\n  }\n\n}\n","<div class=\"pagecontainer\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              Update Password\n            </div>\n            <div class=\"card-body\">\n                <form [formGroup]=\"passwordForm\" (ngSubmit)=\"onSubmit(passwordForm)\">\n                <div class=\" row\">\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"password\">Password</label>\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter Password\" formControlName=\"password\" required>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"confirm_password\">Confirm Password</label>\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter Confirm Password\" formControlName=\"confirm_password\" required>\n                        </div>\n                    </div>\n                </div>\n\n\n\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <button type=\"submit\" class=\"btn btn-primary px-4\">{{button_title}}</button>\n                    </div>\n                </div>\n                </form>\n          \n            </div>\n          </div>\n        </div>\n     </div>\n</div>","/*\nProject : Cryptotrades\nFileName :  wallet.component.ts\nAuthor : LinkWell\nFile Created : 21/07/2021\nCopyRights : LinkWell\nPurpose : This is the component file which used to show user ethereum address and copy option\n*/\nimport { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { Clipboard } from \"@angular/cdk/clipboard\"\nimport { ItemService } from 'src/app/services/item.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport { TransferComponent } from '../transfer/transfer.component';\n@Component({\n  selector: 'app-wallet',\n  templateUrl: './wallet.component.html',\n  styleUrls: ['./wallet.component.css']\n})\nexport class WalletComponent implements OnInit {\n  walletInput:string= \"\"\n  currentUser:any;\n  userInfo:any;\n  walletAmount:number = 0;\n  constructor(\n    private userService: UserService,\n    private clipboard: Clipboard,\n    private snackBar: MatSnackBar,\n    private itemService: ItemService,\n    public dialog: MatDialog,\n  ) { \n    this.currentUser = this.userService.getUser();\n    this.getProfileInfo();\n    this.userBalance();\n  }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * This is the function which used to get profile information of logged in user\n   */\n  getProfileInfo = () => {\n    this.userService.viewProfile(this.currentUser.user_id).subscribe(result=>{\n      var resulter:any = result;\n      this.userInfo = resulter.result;\n      console.log(this.userInfo)\n      this.walletInput = this.userInfo.public_key;\n    })\n  }\n\n  /**\n   * This is the function which used to get balance from user ethereum wallet\n   */\n  userBalance = () => {\n    this.itemService.checkBalance().subscribe(result=>{\n       if(result.status == true) {\n         this.walletAmount = result.return_id.toFixed(2);\n       }\n    })\n  }\n\n  /**\n   * This is the function which open transfer component for withdrawal\n   */\n  tranferAction = () => {\n    const dialogRef = this.dialog.open(TransferComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      if(result) {\n        if (result.type == \"reload\") {\n          this.userBalance();\n        }\n      }\n    });\n  }\n\n  /**\n   * This is the function which used to compy ethereum address in clipboard\n   */\n  copyAddress=()=> {\n    this.clipboard.copy(this.userInfo.public_key)\n    this.snackBar.open('Ethereum address copied', \"\", { duration: 2000 });\n }\n\n}\n","<div class=\"pagecontainer\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              Wallet \n            </div>\n            <div class=\"card-body\">\n        \n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <div class=\"\">\n                            <label for=\"name\">Your Wallet Balance : {{walletAmount}} ETH</label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-group row\">\n                    <div class=\"col-12\">\n                        <div class=\"input-group\">\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"walletInput\" disabled>\n                            <div class=\"input-group-append\" (click)=\"copyAddress()\"><span class=\"input-group-text\"><i class=\"fa fa-copy\"></i></span></div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <button type=\"submit\" class=\"btn btn-primary px-4\" (click)=\"tranferAction()\">Transfer</button>\n                    </div>\n                </div>\n          \n            </div>\n          </div>\n        </div>\n     </div>\n</div>","/*\nProject : Cryptotrades\nFileName :  transfer.component.ts\nAuthor : LinkWell\nFile Created : 21/07/2021\nCopyRights : LinkWell\nPurpose : This is the component file which used to show withdrawal screen for user\n*/\nimport { Component, OnInit, Inject } from '@angular/core';\nimport {MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { ItemService } from 'src/app/services/item.service';\n@Component({\n  selector: 'app-transfer',\n  templateUrl: './transfer.component.html',\n  styleUrls: ['./transfer.component.css']\n})\nexport class TransferComponent implements OnInit {\n  button_title:string = \"Transfer\";\n  transferForm: FormGroup;\n  constructor(\n    public formbuilder: FormBuilder,\n    public dialogRef: MatDialogRef<TransferComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private snackBar: MatSnackBar,\n    private itemService:ItemService\n  ) { \n    this.transferForm = formbuilder.group({\n      'eth_address': [null, Validators.compose([Validators.required])],\n      'amount': [null,Validators.compose([Validators.required, Validators.pattern(\"^[0-9]+(.[0-9]{0,5})?$\")])]\n    })\n  }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * This is the function which used to send ethereum outside with validation\n   */\n  onSubmit(formData: any) {\n    if (this.transferForm.valid && this.button_title == \"Transfer\") {\n      this.button_title = \"Transferring\";\n      this.transferApi({\n        eth_address:formData.value.eth_address,\n        amount: formData.value.amount,\n      });\n    } else {\n      if (this.transferForm.controls.eth_address.invalid) {\n        if (this.transferForm.controls.eth_address.errors) {\n          if (this.transferForm.controls.eth_address.errors.required) {\n            this.snackBar.open('Ethereum address is required', \"\", { duration: 2000 });\n          } \n        }\n      } else if (this.transferForm.controls.amount.invalid) {\n        if (this.transferForm.controls.amount.errors) {\n          if (this.transferForm.controls.amount.errors.required) {\n            this.snackBar.open('Ethereum value is required', \"\", { duration: 2000 });\n          } else {\n            this.snackBar.open('Ethereum value should be numeric', \"\", { duration: 2000 });\n          } \n        }\n      }\n    }\n  }\n\n  /**\n   * This is the function which used to send ethereum outside through api\n   */\n  transferApi = (params:any) => {\n     this.itemService.transferBalance(params).subscribe(result=>{\n       if(result.status == true) {\n         this.dialogRef.close({type:'reload'});\n       }\n       this.snackBar.open(result.message, \"\", { duration: 2000 });\n       this.button_title = \"Transfer\"\n     })\n  }\n\n  /**\n   * This is the function which used to close transfer dialog\n   */\n  closePop = () => {\n    this.dialogRef.close();\n  }\n}\n","\n<div class=\"userForm\">\n    <div class=\"userFormInner\">\n        <h2>\n            Transfer ETH\n        </h2>\n        <div class=\"pop_close\" (click)=\"closePop()\">\n            <i class=\"cil-x\"></i>\n        </div>\n        <div class=\"formContainer\">\n            <form [formGroup]=\"transferForm\" (ngSubmit)=\"onSubmit(transferForm)\">\n                <div class=\"form-group\">\n                    <label for=\"eth_address\">Ethereum Address</label>\n                    <input type=\"text\" placeholder=\"Enter Ethereum Address\" formControlName=\"eth_address\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"amount\">ETH Value</label>\n                    <input type=\"text\" placeholder=\"Enter Ethereum Value\" formControlName=\"amount\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary\">{{button_title}}</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>"]}